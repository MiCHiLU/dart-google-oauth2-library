{"dependencies":[{"uri":"file:///usr/local/Cellar/dart-editor/25017/dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"file:///usr/local/Cellar/dart-editor/25017/dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","id":"0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"uri":"package:oauth2/src/credentials.dart","name":"package:oauth2/src/credentials.dart","id":"credentials","children":[{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"Credentials that prove that a client is allowed to access a resource on the\nresource owner's behalf. These credentials are long-lasting and can be\nsafely persisted across multiple runs of the program.\n\nMany authorization servers will attach an expiration date to a set of\ncredentials, along with a token that can be used to refresh the credentials\nonce they've expired. The [Client] will automatically refresh its\ncredentials when necessary. It's also possible to explicitly refresh them\nvia [Client.refreshCredentials] or [Credentials.refresh].\n\nNote that a given set of credentials can only be refreshed once, so be sure\nto save the refreshed credentials for future use.","name":"Credentials","id":"Credentials","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Serializes a set of credentials to JSON. Nothing is guaranteed about the\noutput except that it's valid JSON and compatible with\n[Credentials.toJson].","name":"toJson","id":"toJson0()","line":"129","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"credentials/Credentials","name":"Credentials"}],"name":"Future"},"comment":"Returns a new set of refreshed credentials. See [Client.identifier] and\n[Client.secret] for explanations of those parameters.\n\nYou may request different scopes than the default by passing in\n[newScopes]. These must be a subset of [scopes].\n\nThis will throw a [StateError] if these credentials can't be refreshed, an\n[AuthorizationException] if refreshing the credentials fails, or a\n[FormatError] if the authorization server returns invalid responses.","name":"refresh","id":"refresh4()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"identifier","id":"identifier","line":"147","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"secret","id":"secret","line":"148","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isOptional":true,"name":"newScopes","id":"newScopes","line":"149","kind":"param"},{"isNamed":true,"ref":{"refId":"client/Client","name":"Client"},"isOptional":true,"name":"httpClient","id":"httpClient","line":"150","kind":"param"}],"line":"146","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether or not these credentials have expired. Note that it's possible the\ncredentials will expire shortly after this is called. However, since the\nclient's expiration date is kept a few seconds earlier than the server's,\nthere should be enough leeway to rely on this.","name":"isExpired","id":"isExpired","line":"53","kind":"property"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether it's possible to refresh these credentials.","name":"canRefresh","id":"canRefresh","line":"57","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"The token that is sent to the resource server to prove the authorization\nof a client.","name":"accessToken","id":"accessToken","line":"30","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"The token that is sent to the authorization server to refresh the\ncredentials. This is optional.","name":"refreshToken","id":"refreshToken","line":"34","kind":"variable"},{"ref":{"refId":"dart.core/Uri","name":"Uri"},"isFinal":true,"comment":"The URL of the authorization server endpoint that's used to refresh the\ncredentials. This is optional.","name":"tokenEndpoint","id":"tokenEndpoint","line":"38","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isFinal":true,"comment":"The specific permissions being requested from the authorization server.\nThe scope strings are specific to the authorization server and may be\nfound in its documentation.","name":"scopes","id":"scopes","line":"43","kind":"variable"},{"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"isFinal":true,"comment":"The date at which these credentials will expire. This is likely to be a\nfew seconds earlier than the server's idea of the expiration date.","name":"expiration","id":"expiration","line":"47","kind":"variable"},{"comment":"Creates a new set of credentials.\n\nThis class is usually not constructed directly; rather, it's accessed via\n[Client.credentials] after a [Client] is created by\n[AuthorizationCodeGrant]. Alternately, it may be loaded from a serialized\nform via [Credentials.fromJson].","name":"","id":"5()","children":[{"initializedField":{"refId":"credentials/Credentials/accessToken","name":"accessToken"},"ref":{"refId":"dart.core/String","name":"String"},"name":"accessToken","id":"accessToken","line":"66","kind":"param"},{"initializedField":{"refId":"credentials/Credentials/refreshToken","name":"refreshToken"},"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"refreshToken","id":"refreshToken","line":"67","kind":"param"},{"initializedField":{"refId":"credentials/Credentials/tokenEndpoint","name":"tokenEndpoint"},"ref":{"refId":"dart.core/Uri","name":"Uri"},"isOptional":true,"name":"tokenEndpoint","id":"tokenEndpoint","line":"68","kind":"param"},{"initializedField":{"refId":"credentials/Credentials/scopes","name":"scopes"},"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"isOptional":true,"name":"scopes","id":"scopes","line":"69","kind":"param"},{"initializedField":{"refId":"credentials/Credentials/expiration","name":"expiration"},"ref":{"refId":"dart.core/DateTime","name":"DateTime"},"isOptional":true,"name":"expiration","id":"expiration","line":"70","kind":"param"}],"line":"65","kind":"constructor"},{"returnType":{"refId":"credentials/Credentials","name":"Credentials"},"comment":"Loads a set of credentials from a JSON-serialized form. Throws\n[FormatException] if the JSON is incorrectly formatted.","name":"fromJson","id":"fromJson1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"json","id":"json","kind":"param"}],"line":"74","kind":"constructor"}],"line":"27","kind":"class"}],"line":"5","kind":"library"}