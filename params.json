{"name":"Dart-google-oauth2-library","body":"# dart-google-oauth2-library\r\n\r\n[![Build Status](https://drone.io/github.com/dart-gde/dart-google-oauth2-library/status.png)](https://github.com/dart-gde/dart-google-oauth2-library/)\r\n\r\n### Description\r\n\r\nDart library to use for Google OAuth2 authentication / Client-side flow\r\n\r\n\r\n### Usage/Installation\r\n\r\n\r\nGo to [Google APIs Console](https://code.google.com/apis/console/) and create a new Project\r\nCreate a new `Client ID` for web applications in \"API Access\"\r\nSet JavaScript origins to your server or for example `http://127.0.0.1:3030/` for local testing in Dartium\r\n\r\nAdd this dependency to your pubspec.yaml\r\n\r\n```\r\n  dependencies:\r\n    google_oauth2_client: '>=0.2.0'\r\n```\r\n\r\n### Web applications\r\n\r\nImport the library in your dart application\r\n\r\n```\r\n  import \"package:google_oauth2_client/google_oauth2_browser.dart\";\r\n```\r\n\r\nInitialize the library with your parameters\r\n\r\n```\r\nfinal auth = new OAuth2(\r\n  \"YOUR CLIENT ID HERE\",\r\n  [\"scope1\", \"scope2\", ...],\r\n  tokenLoaded:oauthReady);\r\n```\r\n\r\nThe `oauthReady` function will be called once your app has a valid OAuth token to call the APIs.\r\nIf the user has authorized the app in the past, this will happen automatically.\r\nOtherwise, you need to call `auth.login()` to trigger a confirmation dialog.\r\n\r\nOnce you have an access token you can use the following to send authenticated requests to the API.\r\n\r\n```\r\n  request.setRequestHeader(\"Authorization\", \"${auth.token.type} ${auth.token.data}\");\r\n```\r\n\r\nSee [example/oauth_example.dart](https://github.com/dart-gde/dart-google-oauth2-library/blob/master/example/oauth_example.dart) for example login and request.\r\n\r\n### Console applications\r\n\r\nImport the library in your dart application\r\n\r\n```\r\n  import \"package:google_oauth2_client/google_oauth2_console.dart\";\r\n```\r\nSetup the `identifier` and `secret` by creating a [Google Installed App](https://developers.google.com/accounts/docs/OAuth2InstalledApp) client id in [APIs Console](https://code.google.com/apis/console) \r\n\r\n```\r\n  String identifier = \"YOUR IDENTIFIER HERE\";\r\n  String secret = \"YOUR SECRET HERE\";\r\n  List scopes =   [\"scope1\", \"scope2\", ...];\r\n  final auth = new OAuth2Console(identifier: identifier, secret: secret, scopes: scopes);\r\n```\r\n\r\nWhen making calls the `OAuth2Console` provides a `widthClient` method that will provide you with the `http.Client` which to make requests. This may change in the future, for now it handles if the client has not allowed access to this application. credentials are stored locally by default in a file named `credentials.json`. Also by default the application does not check googles certificates, a certificate is provided [ca-certificates.crt](lib/src/console/oauth2_console_client/ca-certificates.crt). Place the certificate in the same folder as the application curl will check cert before executing. \r\n\r\n```\r\n  Future clientCallback(http.Client client) {\r\n    var completer = new Completer();\r\n    final url = \"https://www.googleapis.com/plus/v1/people/me\";\r\n    client.get(url).then((http.Response response) {\r\n      var data = JSON.parse(response.body);\r\n      print(\"Logged in as ${data[\"displayName\"]}\");\r\n    });\r\n    return completer.future;\r\n  };\r\n\r\n  auth.withClient(clientCallback);\r\n```\r\n\r\nExample below, the user needs to open the link provided to allow for offline support of the application. \r\n\r\n```\r\n~/dart/dart-google-oauth2-library/example$ dart oauth_example_console.dart \r\n\r\nClient needs your authorization for scopes [https://www.googleapis.com/auth/plus.me]\r\nIn a web browser, go to https://accounts.google.com/o/oauth2/auth?access_type=offline&approval_prompt=force&response_type=code&client_id=299615367852-n0kfup30mfj5emlclfgud9g76itapvk9.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3A60476&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fplus.me\r\nThen click \"Allow access\".\r\n\r\nWaiting for your authorization...\r\nAuthorization received, processing...\r\nSuccessfully authorized.\r\n\r\nLogged in as Adam Singer\r\n```\r\n\r\nCurrently console oauth2 does not work on windows yet. Mac and Linux should work if `curl` is in your path. `curl` is being used for passing the auth token from the browser back to the application.  \r\n\r\n### Disclaimer\r\n\r\nNo guarantees about the security or functionality of this libary\r\n\r\n### Licenses\r\n\r\n```\r\nCopyright (c) 2013 Gerwin Sturm & Adam Singer\r\n\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not\r\nuse this file except in compliance with the License. You may obtain a copy of\r\nthe License at\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\r\nLicense for the specific language governing permissions and limitations under\r\nthe License\r\n\r\n------------------------\r\nBased on http://code.google.com/p/google-api-dart-client\r\n\r\nCopyright 2012 Google Inc.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not\r\nuse this file except in compliance with the License. You may obtain a copy of\r\nthe License at\r\n\r\nhttp://www.apache.org/licenses/LICENSE-2.0\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\r\nWARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\r\nLicense for the specific language governing permissions and limitations under\r\nthe License\r\n```\r\n","tagline":"Dart library to use for Google OAuth2 authentication / Client-side flow","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-38019450-1"}