{"dependencies":[{"uri":"file:///usr/local/Cellar/dart-editor/25017/dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"file:///usr/local/Cellar/dart-editor/25017/dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"","id":"0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"}],"line":"5","kind":"library"}],"comment":"Generic utility functions. Stuff that should possibly be in core.","uri":"file:///Users/kevin/source/github/dart-google-oauth2-library/lib/src/console/oauth2_console_client/utils.dart","id":"utils","children":[{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"Takes a simple data structure (composed of [Map]s, [Iterable]s, scalar\nobjects, and [Future]s) and recursively resolves all the [Future]s contained\nwithin. Completes with the fully resolved structure.","name":"awaitObject","id":"awaitObject1()","children":[{"name":"object","id":"object","kind":"param"}],"line":"339","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Decodes a URL-encoded string. Unlike [decodeUriComponent], this includes\nreplacing `+` with ` `.","name":"urlDecode","id":"urlDecode1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"encoded","id":"encoded","kind":"param"}],"line":"333","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Add all key/value pairs from [source] to [destination], overwriting any\npre-existing values.","name":"mapAddAll","id":"mapAddAll2()","children":[{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"destination","id":"destination","kind":"param"},{"ref":{"refId":"dart.core/Map","name":"Map"},"name":"source","id":"source","kind":"param"}],"line":"328","kind":"method"},{"returnType":{"refId":"dart.core/Uri","name":"Uri"},"comment":"Return [uri] with redundant port information removed.","name":"canonicalizeUri","id":"canonicalizeUri1()","children":[{"ref":{"refId":"dart.core/Uri","name":"Uri"},"name":"uri","id":"uri","kind":"param"}],"line":"315","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether [uri1] and [uri2] are equal. This consider HTTP URIs to default to\nport 80, and HTTPs URIs to default to port 443.","name":"urisEqual","id":"urisEqual2()","children":[{"ref":{"refId":"dart.core/Uri","name":"Uri"},"name":"uri1","id":"uri1","kind":"param"},{"ref":{"refId":"dart.core/Uri","name":"Uri"},"name":"uri2","id":"uri2","kind":"param"}],"line":"311","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Convert a [Map] from parameter names to values to a URL query string.","name":"mapToQuery","id":"mapToQuery1()","children":[{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"name":"map","id":"map","kind":"param"}],"line":"295","kind":"method"},{"returnType":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"comment":"Convert a URL query string (or `application/x-www-form-urlencoded` body)\ninto a [Map] from parameter names to values.","name":"queryToMap","id":"queryToMap1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"queryList","id":"queryList","kind":"param"}],"line":"282","kind":"method"},{"returnType":{"refId":"dart.core/Uri","name":"Uri"},"comment":"Adds additional query parameters to [url], overwriting the original\nparameters if a name conflict occurs.","name":"addQueryParameters","id":"addQueryParameters2()","children":[{"ref":{"refId":"dart.core/Uri","name":"Uri"},"name":"url","id":"url","kind":"param"},{"ref":{"refId":"dart.core/Map","arguments":[{"refId":"dart.core/String","name":"String"},{"refId":"dart.core/String","name":"String"}],"name":"Map"},"name":"parameters","id":"parameters","kind":"param"}],"line":"274","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"Like [String.split], but only splits on the first occurrence of the pattern.\nThis will always return an array of two elements or fewer.","name":"split1","id":"split12()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"toSplit","id":"toSplit","kind":"param"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"pattern","id":"pattern","kind":"param"}],"line":"263","kind":"method"},{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/Iterable","name":"Iterable"}],"name":"Future"},"comment":"Like [Iterable.where], but allows [test] to return [Future]s and uses the\nresults of those [Future]s as the test.","name":"futureWhere","id":"futureWhere2()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"iter","id":"iter","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"test","id":"test","children":[{"uri":"file:///usr/local/Cellar/dart-editor/25017/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"file:///Users/kevin/source/github/dart-google-oauth2-library/lib/src/console/oauth2_console_client/utils.dart","name":"value","id":"value","line":"248","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"248","kind":"method"},{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Stream"},"comment":"Converts a stream of arbitrarily chunked strings into a line-by-line stream.\nThe lines don't include line termination characters. A single trailing\nnewline is ignored.","name":"streamToLines","id":"streamToLines1()","children":[{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"Stream"},"name":"stream","id":"stream","kind":"param"}],"line":"223","kind":"method"},{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/String","name":"String"}],"name":"List"},"comment":"Splits [text] on its line breaks in a Windows-line-break-friendly way.","name":"splitLines","id":"splitLines1()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"text","id":"text","kind":"param"}],"line":"217","kind":"method"},{"returnType":{"refId":"utils/Pair","arguments":[{"refId":"dart.async/Stream","name":"Stream"},{"refId":"dart.async/Stream","name":"Stream"}],"name":"Pair"},"comment":"Creates two single-subscription [Stream]s that each emit all values and\nerrors from [stream]. This is useful if [stream] is single-subscription but\nmultiple subscribers are necessary.","name":"tee","id":"tee1()","children":[{"ref":{"refId":"dart.async/Stream","name":"Stream"},"name":"stream","id":"stream","kind":"param"}],"line":"195","kind":"method"},{"returnType":{"refId":"utils/Pair","arguments":[{"refId":"dart.async/Stream","name":"Stream"},{"refId":"dart.async/StreamSubscription","name":"StreamSubscription"}],"name":"Pair"},"comment":"Returns a wrapped version of [stream] along with a [StreamSubscription] that\ncan be used to control the wrapped stream.","name":"streamWithSubscription","id":"streamWithSubscription1()","children":[{"ref":{"refId":"dart.async/Stream","name":"Stream"},"name":"stream","id":"stream","kind":"param"}],"line":"180","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"Returns a [Future] that will complete to the first element of [stream].\nUnlike [Stream.first], this is safe to use with single-subscription streams.","name":"streamFirst","id":"streamFirst1()","children":[{"ref":{"refId":"dart.async/Stream","name":"Stream"},"name":"stream","id":"stream","kind":"param"}],"line":"164","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"Configures [future] so that its result (success or exception) is passed on\nto [completer].","name":"chainToCompleter","id":"chainToCompleter2()","children":[{"ref":{"refId":"dart.async/Future","name":"Future"},"name":"future","id":"future","kind":"param"},{"ref":{"refId":"dart.async/Completer","name":"Completer"},"name":"completer","id":"completer","kind":"param"}],"line":"156","kind":"method"},{"returnType":{"refId":"dart.async/Future","name":"Future"},"comment":"Returns a [Future] that completes in [milliseconds].","name":"sleep","id":"sleep1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"milliseconds","id":"milliseconds","kind":"param"}],"line":"148","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Returns the hex-encoded sha1 hash of [source].","name":"sha1","id":"sha11()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"source","id":"source","kind":"param"}],"line":"141","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns whether or not [str] ends with [matcher].","name":"endsWithPattern","id":"endsWithPattern2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"str","id":"str","kind":"param"},{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"name":"matcher","id":"matcher","kind":"param"}],"line":"133","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Replace each instance of [matcher] in [source] with the return value of\n[fn].","name":"replace","id":"replace3()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"source","id":"source","kind":"param"},{"ref":{"refId":"dart.core/Pattern","name":"Pattern"},"name":"matcher","id":"matcher","kind":"param"},{"ref":{"refId":"dart.core/Function","name":"Function"},"name":"fn","id":"fn","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"uri":"file:///usr/local/Cellar/dart-editor/25017/dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"file:///Users/kevin/source/github/dart-google-oauth2-library/lib/src/console/oauth2_console_client/utils.dart","name":"Match","id":"Match","line":"120","kind":"param"}],"line":"13","kind":"functiontype"}],"kind":"param"}],"line":"120","kind":"method"},{"returnType":{"refId":"dart.core/Set","name":"Set"},"comment":"Returns a set containing all elements in [minuend] that are not in\n[subtrahend].","name":"setMinus","id":"setMinus2()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"minuend","id":"minuend","kind":"param"},{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"subtrahend","id":"subtrahend","kind":"param"}],"line":"112","kind":"method"},{"comment":"Asserts that [iter] contains only one element, and returns it.","name":"only","id":"only1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"iter","id":"iter","kind":"param"}],"line":"101","kind":"method"},{"returnType":{"refId":"dart.core/List","name":"List"},"comment":"Flattens nested lists inside an iterable into a single list containing only\nnon-list elements.","name":"flatten","id":"flatten1()","children":[{"ref":{"refId":"dart.core/Iterable","name":"Iterable"},"name":"nested","id":"nested","kind":"param"}],"line":"85","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Pads [source] to [length] by adding spaces at the end.","name":"padRight","id":"padRight2()","children":[{"ref":{"refId":"dart.core/String","name":"String"},"name":"source","id":"source","kind":"param"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"length","id":"length","kind":"param"}],"line":"72","kind":"method"},{"isFinal":true,"comment":"A regular expression matching a trailing CR character.","name":"_trailingCR","isPrivate":true,"id":"_trailingCR","line":"212","kind":"variable"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"A completer that waits until all added [Future]s complete.","name":"FutureGroup","id":"FutureGroup","children":[{"returnType":{"refId":"dart.async/Future","arguments":[{"refId":"utils/FutureGroup/T","name":"T"}],"name":"Future"},"comment":"Wait for [task] to complete.","name":"add","id":"add1()","children":[{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"utils/FutureGroup/T","name":"T"}],"name":"Future"},"name":"task","id":"task","kind":"param"}],"line":"41","kind":"method"},{"ref":{"refId":"dart.async/Future","arguments":[{"refId":"dart.core/List","name":"List"}],"name":"Future"},"name":"future","id":"future","line":"67","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"_pending","isPrivate":true,"id":"_pending","line":"33","kind":"variable"},{"ref":{"refId":"dart.async/Completer","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"utils/FutureGroup/T","name":"T"}],"name":"List"}],"name":"Completer"},"name":"_completer","isPrivate":true,"id":"_completer","line":"34","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.async/Future","arguments":[{"refId":"utils/FutureGroup/T","name":"T"}],"name":"Future"}],"name":"List"},"isFinal":true,"name":"futures","id":"futures","line":"35","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"completed","id":"completed","line":"36","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"utils/FutureGroup/T","name":"T"}],"name":"List"},"isFinal":true,"name":"_values","isPrivate":true,"id":"_values","line":"38","kind":"variable"},{"name":"T","id":"T","kind":"typeparam"}],"line":"32","kind":"class"},{"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"A pair of values.","name":"Pair","id":"Pair","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"name":"toString","id":"toString0()","line":"19","kind":"method"},{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"21","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"name":"hashCode","id":"hashCode","line":"26","kind":"property"},{"ref":{"refId":"utils/Pair/E","name":"E"},"name":"first","id":"first","line":"14","kind":"variable"},{"ref":{"refId":"utils/Pair/F","name":"F"},"name":"last","id":"last","line":"15","kind":"variable"},{"name":"","id":"2()","children":[{"initializedField":{"refId":"utils/Pair/first","name":"first"},"ref":{"refId":"utils/Pair/E","name":"E"},"name":"first","id":"first","kind":"param"},{"initializedField":{"refId":"utils/Pair/last","name":"last"},"ref":{"refId":"utils/Pair/F","name":"F"},"name":"last","id":"last","kind":"param"}],"line":"17","kind":"constructor"},{"name":"E","id":"E","kind":"typeparam"},{"name":"F","id":"F","kind":"typeparam"}],"line":"13","kind":"class"}],"line":"6","kind":"library"}